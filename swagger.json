{
  "swagger": "2.0",
  "info": {
    "title": "mlapiv2/api.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v2/experiments": {
      "get": {
        "summary": "Lists all experiments that belong to a user across all projects.",
        "operationId": "CMLService_ListAllExperiments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListExperimentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/jobs": {
      "get": {
        "summary": "Returns all jobs a user has access to.",
        "operationId": "CMLService_ListAllJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [creator.email creator.name creator.username description kernel name paused script type].\nFor example:\n  search_filter={\"name\":\"foo\",\"creator.name\":\"bar\"},.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/models": {
      "get": {
        "summary": "List all models that belong to a user across all projects.",
        "operationId": "CMLService_ListAllModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/newsfeeds/{category}": {
      "get": {
        "summary": "List the newsfeeds, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListNewsFeeds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListNewsFeedsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "category",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "page_size",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects": {
      "get": {
        "summary": "Return all projects, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListProjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [creator.email creator.name creator.username description name owner.email owner.name owner.username].\nFor example:\n  search_filter={\"name\":\"foo\",\"creator.name\":\"bar\"},.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [created_at creator.email creator.name creator.username description name owner.email owner.name owner.username updated_at].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=-updated_at,+name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "include_public_projects",
            "description": "Default is false. If include_public_projects is set to true, then it will return\nall projects user has access to, including public projects.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "include_all_projects",
            "description": "Default is false. If include_all_projects is set to true, then it will return\nall projects in the workspace if user is a site admin. If user is not a site admin,\nthen it will be equivalent to making use of flag include_public_projects and will return \nall projects user has access to, including public projects.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create a new project.",
        "operationId": "CMLService_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateProjectRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/batch": {
      "get": {
        "summary": "Return a list of projects given a list of project IDs. This method will only return\nprojects that the calling user has access to, and can be used in situations where\ninformation about a subset of projects (like project names) is needed.",
        "operationId": "CMLService_BatchListProjects",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/BatchListProjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_ids",
            "description": "The list of project IDs to return projects for.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{experiment.project_id}/experiments/{experiment.id}": {
      "patch": {
        "summary": "Update an existing experiment.",
        "operationId": "CMLService_UpdateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "experiment.project_id",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment.id",
            "description": "Unique identifier for the experiment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project.id}": {
      "patch": {
        "summary": "Update an existing project.",
        "operationId": "CMLService_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project.id",
            "description": "An opaque public identifier for the project.\nOutput only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The project object containing some number of fields to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Project"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}": {
      "get": {
        "summary": "Return one project.",
        "operationId": "CMLService_GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Project"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "Identifier for a project, in the form of a 19 digit string.\nExample: a1b2-c3d4-e5f6-g7h8",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete a project.",
        "operationId": "CMLService_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project's identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/applications": {
      "get": {
        "summary": "List applications, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListApplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListApplicationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project's identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [bypass_authentication creator.email creator.name creator.username description kernel name script status subdomain]\nwhere \"status\" can be one of the following: [running, stopping, stopped, starting, failed]\nFor example:\n  search_filter = {\"status\":\"running\"}.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [created_at creator.email creator.name creator.username description kernel name script status updated_at].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=-updated_at,name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create an application and implicitly start it immediately.",
        "operationId": "CMLService_CreateApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project's identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateApplicationRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/applications/{application.id}": {
      "patch": {
        "summary": "Update an application",
        "operationId": "CMLService_UpdateApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The public project identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application.id",
            "description": "public identifier of the application.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The application containing some number of fields to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Application"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/applications/{application_id}": {
      "get": {
        "summary": "Get an application.",
        "operationId": "CMLService_GetApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The public project identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application_id",
            "description": "The public application identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete an application.",
        "operationId": "CMLService_DeleteApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteApplicationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The public project identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application_id",
            "description": "The public application identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/applications/{application_id}:restart": {
      "post": {
        "summary": "Start an application.",
        "operationId": "CMLService_RestartApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The public project identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application_id",
            "description": "The public application identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/applications/{application_id}:stop": {
      "post": {
        "summary": "Stop an application.",
        "operationId": "CMLService_StopApplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Application"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The public project identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "application_id",
            "description": "The public application identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/collaborators": {
      "get": {
        "summary": "List project collaborators.",
        "operationId": "CMLService_ListProjectCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListProjectCollaboratorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The identifier of the project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [username, permission].\nFor example:\n  search_filter={\"username\":\"foo\", \"permission\": \"read\"},.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [username, permission].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=-username,+permission.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/collaborators/{username}": {
      "delete": {
        "summary": "Delete a project collaborator",
        "operationId": "CMLService_DeleteProjectCollaborator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteProjectCollaboratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The identifier of the project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "description": "The username of the collaborator to add.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "put": {
        "summary": "Add a project collaborator",
        "operationId": "CMLService_AddProjectCollaborator",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AddProjectCollaboratorResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The identifier of the project.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "description": "The username of the collaborator to add.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddProjectCollaboratorRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments": {
      "get": {
        "summary": "List all experiments in a given project.",
        "operationId": "CMLService_ListExperiments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListExperimentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create an experiment.",
        "operationId": "CMLService_CreateExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExperimentRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments/{experiment_id}": {
      "get": {
        "summary": "Return one experiment.",
        "operationId": "CMLService_GetExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Experiment"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "ID of the associated experiment.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete an experiment that belongs to an experiment id.",
        "operationId": "CMLService_DeleteExperiment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteExperimentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments/{experiment_id}/runs": {
      "get": {
        "summary": "Returns a list of Runs that belong to an experiment.",
        "operationId": "CMLService_ListExperimentRuns",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListExperimentRunsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project to list experiment runs in.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "Experiment ID to search over.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [creator.email creator.name creator.username name status].\nDynamic search key words are supported for experiment runs.\nSupported fields are [metrics tags params].",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are:\n[created_at creator.email creator.name creator.username name start_time].\nIt also supports dynamic sort for metrics, tags and params.\n\"+\" means sort by ascending order, and \"-\" means sort by descending order.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create a run for an experiment.",
        "operationId": "CMLService_CreateExperimentRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ExperimentRun"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "ID of the associated experiment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateExperimentRunRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments/{experiment_id}/runs/{run.id}": {
      "patch": {
        "summary": "Update an experiment run.",
        "operationId": "CMLService_UpdateExperimentRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ExperimentRun"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project where the experiment run lives",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "ID of the associated experiment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run.id",
            "description": "Unique identifier for the ExperimentRun.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentRun"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments/{experiment_id}/runs/{run_id}": {
      "get": {
        "summary": "Get metadata, metrics, params, tags and artifacts for a run. In the case where multiple metrics\nwith the same key are logged for a run, return only the value with the latest timestamp.\nIf there are multiple values with the latest timestamp, return the maximum of these values.",
        "operationId": "CMLService_GetExperimentRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ExperimentRun"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "ID of the associated experiment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "ID of the ExperimentRun to fetch. Must be provided.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete an experiment run.",
        "operationId": "CMLService_DeleteExperimentRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteExperimentRunResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project the experiment run lives in.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "The experiment the run is a part of.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "The ID of the run to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments/{experiment_id}/runs/{run_id}/metrics/{metric_key}": {
      "get": {
        "summary": "Gets the all the recorded metrics for the key for a given run.",
        "operationId": "CMLService_GetExperimentRunMetrics",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GetExperimentRunMetricsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "Project ID",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "description": "Experiment ID the run belongs to",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "ID of the ExperimentRun",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metric_key",
            "description": "metric key name.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments/{experiment_id}/runs/{run_id}:deletebatch": {
      "post": {
        "summary": "Bulk delete an experiment run details like metrics, params, tags in one request.",
        "operationId": "CMLService_DeleteExperimentRunBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteExperimentRunBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "ID of the ExperimentRun to log under",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DeleteExperimentRunBatchRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/experiments/{experiment_id}/runs/{run_id}:logbatch": {
      "post": {
        "summary": "Bulk update an experiment run details like metrics, params, tags in one request.",
        "operationId": "CMLService_LogExperimentRunBatch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/LogExperimentRunBatchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "experiment_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "ID of the ExperimentRun to log under",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LogExperimentRunBatchRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/files/{path}": {
      "get": {
        "summary": "List files/subdirectories at a specified path",
        "operationId": "CMLService_ListProjectFiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListProjectFilesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The identifier of the project that contains the files to list.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "description": "Path to list, relative to project root (/home/cdsw)",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete a file or directory.",
        "operationId": "CMLService_DeleteProjectFile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteProjectFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The identifier of the project that contains the file or directory.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "description": "The path to the file or directory to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "patch": {
        "summary": "Update file metadata, such as renaming.",
        "operationId": "CMLService_UpdateProjectFileMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/FileInfo"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The identifier of the project that contains the file or directory.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "path",
            "description": "The path to the file to update, relative to /home/cdsw",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The FileInfo object representing the updated metadata for the file.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileInfo"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/jobs": {
      "get": {
        "summary": "Returns all jobs, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project's identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [creator.email creator.name creator.username description kernel name paused script type].\nFor example:\n  search_filter={\"name\":\"foo\",\"creator.name\":\"bar\"},.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [created_at creator.email creator.name creator.username description kernel name paused script type updated_at],\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=+name,-created_at.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create a new job.",
        "operationId": "CMLService_CreateJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the job.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateJobRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/jobs/{job.id}": {
      "patch": {
        "summary": "Updates a job.",
        "operationId": "CMLService_UpdateJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project containing the job.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job.id",
            "description": "Public identifier of the job.\nOutput only.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The job containing some number of fields to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Job"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/jobs/{job_id}": {
      "get": {
        "summary": "Return one job.",
        "operationId": "CMLService_GetJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Job"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The public project identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job_id",
            "description": "The public job identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Deletes a job.",
        "operationId": "CMLService_DeleteJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteJobResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "the public project identifier",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job_id",
            "description": "The public job identifier",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/jobs/{job_id}/runs": {
      "get": {
        "summary": "Lists job runs, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListJobRuns",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListJobRunsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the job.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job_id",
            "description": "ID of the job containing the job runs.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [creator.email creator.name creator.username description kernel name paused script type],\nwhere \"status\" can be one of the following: [scheduling, running, stopping, stopped, succeeded, failed, timedout]\nFor example:\n  search_filter={\"status\":\"running\",\"id\": \"1\"}.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [created_at creator.email creator.name creator.username description kernel name paused script type updated_at]\"\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=-updated_at,+name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create and start a new job run for a job.",
        "operationId": "CMLService_CreateJobRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/JobRun"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the job.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job_id",
            "description": "The job ID to create a new job run for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateJobRunRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/jobs/{job_id}/runs/{run_id}": {
      "get": {
        "summary": "Gets a job run.",
        "operationId": "CMLService_GetJobRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/JobRun"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the job.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job_id",
            "description": "ID of the job containing the job run.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "ID of the job run to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/jobs/{job_id}/runs/{run_id}:stop": {
      "post": {
        "summary": "Stops a job run. Encoded as a custom method.",
        "operationId": "CMLService_StopJobRun",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/JobRun"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the job",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "job_id",
            "description": "ID of the job containing the job run.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "run_id",
            "description": "ID of the job run to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/machineusers": {
      "get": {
        "operationId": "CMLService_ListAllRunAsMachineUserCollaborators",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListAllRunAsMachineUserCollaboratorsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "page size of the response model build list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "page token for specifying which page to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models": {
      "get": {
        "summary": "List models, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project to list models under.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [auth_enabled creator.email creator.name creator.username description name].\nFor example:\n  search_filter={\"name\":\"foo\",\"auth_enabled\":\"f\"}.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [auth_enabled created_at creator.email creator.name creator.username description name updated_at].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=created_at.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "page size of the response model build list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "page token for specifying which page to return.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create a model.",
        "operationId": "CMLService_CreateModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateModelRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model.id}": {
      "patch": {
        "summary": "Update a model.",
        "operationId": "CMLService_UpdateModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model.id",
            "description": "ID of the model.\nA model CRN looks like \u003cworkspace CRN\u003e/\u003cUUID\u003e. The ID is the UUID portion of the CRN.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The model containing some number of fields to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateSingleModel"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model_id}": {
      "get": {
        "summary": "Get a model.",
        "operationId": "CMLService_GetModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "The project this model belongs to.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "The model's ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete a model.",
        "operationId": "CMLService_DeleteModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model_id}/builds": {
      "get": {
        "summary": "List model builds, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListModelBuilds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListModelBuildsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model to get builds for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [comment creator.email creator.name creator.username crn status],\nwhere \"status\" can be one of [pending, succeeded, built, build failed, timedout, pushing, queued, unknown]\nFor example:\n  search_filter={\"comment\":\"foo\",\"status\":\"pending\"}.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [built_at comment created_at creator.email creator.name creator.username crn status updated_at].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=creator.email.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "page size of the response model build list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "page token for specifying which page to return.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create a model build.",
        "operationId": "CMLService_CreateModelBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ModelBuild"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model build.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "The ID of the model that will the build.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateModelBuildRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model_id}/builds/{build_id}": {
      "get": {
        "summary": "Get a model build.",
        "operationId": "CMLService_GetModelBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ModelBuild"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model containing the build.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "description": "ID of the model build to get.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "registered_model_version_id",
            "description": "ID of the registered model version.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete a model build.",
        "operationId": "CMLService_DeleteModelBuild",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteModelBuildResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model containing the build.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "description": "ID of the build to delete.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model_id}/builds/{build_id}/deployments": {
      "get": {
        "summary": "List model deployments, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListModelDeployments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListModelDeploymentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model to get deployments for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "description": "ID of the model build to get deployments for.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "page size of the response model build list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "page token for specifying which page to return.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create a model deployment.",
        "operationId": "CMLService_CreateModelDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ModelDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model to deploy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "description": "ID of the model build to deploy.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateModelDeploymentRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model_id}/builds/{build_id}/deployments/{deployment_id}": {
      "get": {
        "summary": "Get a model deployment.",
        "operationId": "CMLService_GetModelDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ModelDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model containing the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "description": "ID of the model build containing the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment_id",
            "description": "ID of the model deployment to get.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model_id}/builds/{build_id}/deployments/{deployment_id}:restart": {
      "post": {
        "summary": "Restart a model deployment.",
        "operationId": "CMLService_RestartModelDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ModelDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model containing the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "description": "ID of the build containing the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment_id",
            "description": "ID of the deployment to restart.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/projects/{project_id}/models/{model_id}/builds/{build_id}/deployments/{deployment_id}:stop": {
      "post": {
        "summary": "Stop a model deployment.",
        "operationId": "CMLService_StopModelDeployment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ModelDeployment"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "project_id",
            "description": "ID of the project containing the model.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "model_id",
            "description": "ID of the model containing the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "build_id",
            "description": "ID of the build containing the deployment.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deployment_id",
            "description": "ID of the deployment to stop.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/registry/models": {
      "get": {
        "summary": "List registered models.",
        "operationId": "CMLService_ListRegisteredModels",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRegisteredModelsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search_filter = {\"model_name\": \"model_name\"}\n search_filter = {\"creator_id\": \"\u003csso name or user name\u003e\"}.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [created_at creator.email creator.name creator.username description kernel name script status updated_at].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=-created_at.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Register a model.",
        "operationId": "CMLService_CreateRegisteredModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RegisteredModel"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRegisteredModelRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "patch": {
        "summary": "Update a Registered model.",
        "operationId": "CMLService_UpdateRegisteredModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RegisteredModel"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRegisteredModelRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/registry/models/{model_id}": {
      "get": {
        "summary": "Get a registered model.",
        "operationId": "CMLService_GetRegisteredModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RegisteredModel"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "description": "Model ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filters:\nearch_filter = {\"version_number\":\"3\"}\nsearch_filter = {\"creator_id\":\"\u003csso name or user name\u003e\"} example: csso_mlengineer.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [created_at creator.email creator.name creator.username description kernel name script status updated_at].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\n:\nsupported sort=-created_at\nsupported sort=-versions.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Unregister a model deletes a model.",
        "operationId": "CMLService_DeleteRegisteredModel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteRegisteredModelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "description": "Model ID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "patch": {
        "summary": "Update a Registered model version.",
        "operationId": "CMLService_UpdateRegisteredModelVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RegisteredModelVersion"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "description": "Model ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRegisteredModelVersionRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/registry/models/{model_id}/versions/{version_id}": {
      "get": {
        "summary": "Get a registered model version",
        "operationId": "CMLService_GetRegisteredModelVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RegisteredModelVersion"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "description": "Model ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "Model version ID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Unregister a model version.",
        "operationId": "CMLService_DeleteRegisteredModelVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteRegisteredModelVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "model_id",
            "description": "Model ID.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "version_id",
            "description": "Model version ID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimeaddons": {
      "get": {
        "summary": "List the available runtime addons, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListRuntimeAddons",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRuntimeAddonsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [\"identifier\", \"component\", \"display_name\", \"status\"].\nFor example:\n  search_filter = {\"component\": \"Spark\", \"status\": \"AVAILABLE\"},.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimeaddons:updatestatus": {
      "post": {
        "summary": "Update runtime addons",
        "operationId": "CMLService_UpdateRuntimeAddonStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateRuntimeAddonStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRuntimeAddonStatusRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimerepos": {
      "get": {
        "summary": "List Runtime repos.",
        "operationId": "CMLService_ListRuntimeRepos",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRuntimeReposResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [id name url].\nFor example:\n  search_filter={\"id\":\"1\",\"name\":\"My Repo\",\"url\":\"my.url\"}.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [id name url].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "page size of the response runtime repo list.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "page token for specifying which page to return.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create a  Runtime repo.",
        "operationId": "CMLService_CreateRuntimeRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RuntimeRepo"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateRuntimeRepoRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimerepos/{runtime_repo_id}": {
      "delete": {
        "summary": "Delete a Runtime repo.",
        "operationId": "CMLService_DeleteRuntimeRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteRuntimeRepoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "runtime_repo_id",
            "description": "the id of the Runtime Repo to delete",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimerepos/{runtimerepo.id}": {
      "patch": {
        "summary": "Update a Runtime repo.",
        "operationId": "CMLService_UpdateRuntimeRepo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RuntimeRepo"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "runtimerepo.id",
            "description": "The numeric identifier for this runtime repo",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "body",
            "description": "The runtimerepo object containing some number of fields to update.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RuntimeRepo"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimes": {
      "get": {
        "summary": "List the available runtimes, optionally filtered, sorted, and paginated.",
        "operationId": "CMLService_ListRuntimes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListRuntimesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "search_filter",
            "description": "Search filter is an optional HTTP parameter to filter results by.\nSupported search filter keys are: [\"image_identifier\", \"editor\", \"kernel\", \"edition\", \"description\", \"full_version\"].\nFor example:\n  search_filter = {\"kernel\":\"Python 3.7\",\"editor\":\"JupyterLab\"},.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "page_size",
            "description": "Page size is an optional argument for number of entries to return in one page.\nIf not specified, the server will determine a page size.\nIf specified, must be respecified for further requests when using the\nprovided next page token in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "page_token",
            "description": "Page token is an optional argument for specifying which page of results to get.\nIf not specified, the first page will be returned, including a token for the next page.\nWill be empty if there is no next page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "description": "Sort is an optional HTTP parameter to sort results by.\nSupported sort keys are: [image_identifier, editor, kernel, edition, description, full_version].\nwhere \"+\" means sort by ascending order, and \"-\" means sort by descending order.\nFor example:\n  sort=-kernel,+editor.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Register a runtime, given the URL to the image in the docker registry",
        "operationId": "CMLService_RegisterCustomRuntime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RegisterCustomRuntimeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RegisterCustomRuntimeRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimes:update": {
      "post": {
        "summary": "Update the status of selected runtimes",
        "operationId": "CMLService_UpdateRuntimeStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/UpdateRuntimeStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UpdateRuntimeStatusRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/runtimes:validate": {
      "get": {
        "summary": "Validate a runtime, given the URL to the image in the docker registry",
        "operationId": "CMLService_ValidateCustomRuntime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ValidateCustomRuntimeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "url",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/site/config:update": {
      "post": {
        "summary": "Disable engines",
        "operationId": "CMLService_DisableEngines",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DisableEnginesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DisableEnginesRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/site/teams": {
      "post": {
        "summary": "Create a team.",
        "operationId": "CMLService_CreateTeam",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/Team"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateTeamRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/users/{user_id}": {
      "get": {
        "operationId": "CMLService_GetShortUserByID",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ShortUser"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/users/{username}/v1_key:rotate": {
      "post": {
        "summary": "Rotate API V1 key",
        "operationId": "CMLService_RotateV1Key",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/RotateV1KeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "description": "username of the user whose V1 key you want to rotate",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RotateV1KeyRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/users/{username}/v2_keys": {
      "get": {
        "summary": "Get all API V2 keys",
        "operationId": "CMLService_ListV2Keys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ListV2KeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "description": "username of the user whose V2 keys you want to get",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "delete": {
        "summary": "Delete all API V2 keys",
        "operationId": "CMLService_DeleteV2Keys",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteV2KeysResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "description": "username of the user whose V2 keys you want to delete",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      },
      "post": {
        "summary": "Create API V2 key",
        "operationId": "CMLService_CreateV2Key",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CreateV2KeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "description": "username of the user whose V2 key you want to create",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateV2KeyRequest"
            }
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    },
    "/api/v2/users/{username}/v2_keys/{key_id}": {
      "delete": {
        "summary": "Delete an API V2 key",
        "operationId": "CMLService_DeleteV2Key",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/DeleteV2KeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "username",
            "description": "username of the user whose V2 key you want to delete",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "key_id",
            "description": "ID of the V2 key",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "CMLService"
        ]
      }
    }
  },
  "definitions": {
    "AddProjectCollaboratorRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "The identifier of the project."
        },
        "username": {
          "type": "string",
          "description": "The username of the collaborator to add."
        },
        "permission": {
          "type": "string",
          "description": "The project permission of the collaborator to set."
        }
      },
      "description": "Request for adding a project collaborator."
    },
    "AddProjectCollaboratorResponse": {
      "type": "object",
      "description": "Response for adding a project collaborator."
    },
    "Application": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "public identifier of the application."
        },
        "name": {
          "type": "string",
          "title": "Application name"
        },
        "description": {
          "type": "string",
          "title": "Application description"
        },
        "creator": {
          "$ref": "#/definitions/ShortUser",
          "description": "The user that created the application."
        },
        "script": {
          "type": "string",
          "title": "The script to run for this application"
        },
        "subdomain": {
          "type": "string",
          "title": "The subdomain of the application"
        },
        "status": {
          "$ref": "#/definitions/ApplicationStatus",
          "title": "Application status"
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the application was created."
        },
        "stopped_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the application was stopped"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the application was updated"
        },
        "starting_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the application was started"
        },
        "running_at": {
          "type": "string",
          "format": "date-time",
          "title": "When the application started running"
        },
        "kernel": {
          "type": "string",
          "description": "The kernel of the application."
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "description": "The number of vCPU allocated for the job run application."
        },
        "memory": {
          "type": "number",
          "format": "double",
          "description": "The amount of memory allocated for the application (in GB)."
        },
        "nvidia_gpu": {
          "type": "integer",
          "format": "int32",
          "description": "The number of Nvidia GPUs allocated for the application."
        },
        "bypass_authentication": {
          "type": "boolean",
          "format": "boolean",
          "title": "Enable unauthenticated access to application"
        },
        "environment": {
          "type": "string",
          "title": "String of environment variables in json format"
        },
        "runtime_identifier": {
          "type": "string",
          "description": "Runtime image this application should run on."
        },
        "runtime_addon_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The list of runtime addons that this application uses."
        },
        "run_as": {
          "type": "integer",
          "format": "int32",
          "title": "userID of the service account that will be used to run the job.\nIf 0 is returned, it means that job will run as the logged in user"
        }
      },
      "description": "A single application."
    },
    "ApplicationStatus": {
      "type": "string",
      "enum": [
        "APPLICATION_UNKNOWN",
        "APPLICATION_STARTING",
        "APPLICATION_RUNNING",
        "APPLICATION_STOPPING",
        "APPLICATION_STOPPED",
        "APPLICATION_FAILED"
      ],
      "default": "APPLICATION_UNKNOWN",
      "title": "Possible status of an application"
    },
    "BatchListProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          },
          "description": "The list of projects."
        }
      },
      "description": "Respons object for listing projects given a list of IDs."
    },
    "Collaborator": {
      "type": "object",
      "properties": {
        "user": {
          "$ref": "#/definitions/ShortUser",
          "description": "Abbreviated user information."
        },
        "permission": {
          "type": "string",
          "description": "Permission to the project."
        }
      },
      "title": "Abbreviated project collaborator information"
    },
    "CreateApplicationRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "title": "The project's identifier"
        },
        "name": {
          "type": "string",
          "description": "Name of the new application."
        },
        "subdomain": {
          "type": "string",
          "title": "The subdomain of the application.\nThe application will be served at the URL http(s)://subdomain.\u003cdomain\u003e"
        },
        "description": {
          "type": "string",
          "description": "The description of the application."
        },
        "script": {
          "type": "string",
          "description": "The script to run for the new application."
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "description": "CPU cores to allocate to application (default 1)."
        },
        "memory": {
          "type": "number",
          "format": "double",
          "description": "Memory in GB to allocate to application (default 1)."
        },
        "nvidia_gpu": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Nvidia GPUs to allocate to this application (default 0)."
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Default environment variables to include in application."
        },
        "kernel": {
          "type": "string",
          "description": "Kernel to run the job runs on. Possible values are\npython3, python2, r, or scala. Leave blank for runtimes."
        },
        "bypass_authentication": {
          "type": "boolean",
          "format": "boolean",
          "title": "Enable unauthenticated access to application"
        },
        "runtime_identifier": {
          "type": "string",
          "description": "Runtime image identifier to run the application with."
        },
        "runtime_addon_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Runtime addons to run the application with if using runtimes."
        },
        "run_as": {
          "type": "integer",
          "format": "int32",
          "description": "UserID of service account used to run the application."
        }
      },
      "description": "Parameters to create an applications."
    },
    "CreateExperimentRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Experiment name"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "title": "Tags to add more metadata to experiment"
        },
        "artifact_location": {
          "type": "string",
          "description": "Location where all artifacts for the experiment are stored.\nURI of the directory where artifacts should be uploaded.\nThis can be a local path (starting with \"/\"), or a distributed file system (DFS)\npath, like ``s3://bucket/directory`` or ``dbfs:/my/directory``.\nIf not set, the local ``./mlruns`` directory is  chosen."
        },
        "engine_id": {
          "type": "string",
          "title": "Engine ID (from session)"
        }
      },
      "description": "CreateExperimentRequest takes the project id and Experiment name."
    },
    "CreateExperimentRunRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "experiment_id": {
          "type": "string",
          "description": "ID of the associated experiment."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Additional metadata for ExperimentRun."
        }
      },
      "description": "CreateExperimentRunRequest takes an experiment id and project id and\ncreates an ExperimentRun entry."
    },
    "CreateJobRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "ID of the project containing the job."
        },
        "name": {
          "type": "string",
          "description": "Name of the new job."
        },
        "script": {
          "type": "string",
          "description": "The script to run for the new job."
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "description": "CPU cores to allocate to job runs for this job (default 1)."
        },
        "memory": {
          "type": "number",
          "format": "double",
          "description": "Memory in GB to allocate to job runs for this job (default 1)."
        },
        "nvidia_gpu": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Nvidia GPUs to allocate to this job (default 0)."
        },
        "parent_job_id": {
          "type": "string",
          "title": "Optional dependent job if this new job is a dependency.\nSetting this to a parent job will make this job run when the parent job\ncompletes. Cannot be used alongside \"schedule\".\nthis is deprecated and alias of parent_id"
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Default environment variables to include in job runs for this job."
        },
        "arguments": {
          "type": "string",
          "title": "Default arguments to pass to job runs for this job"
        },
        "timeout": {
          "type": "integer",
          "format": "int32",
          "description": "Timeout in seconds of job runs for this job."
        },
        "schedule": {
          "type": "string",
          "description": "Schedule to run a job automatically. Cannot be used in a dependency job.\nFollows the cron format. For example, to execute the job every Monday\nat 1 PM UTC, the schedule would be \"0 13 * * 1\" without quotes."
        },
        "kernel": {
          "type": "string",
          "description": "Kernel to run the job runs on. Possible values are\npython3, python2, r, or scala.\nShould not be set if the project uses ML Runtimes."
        },
        "recipients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobRecipient"
          },
          "description": "An optional list of recipients to receive notifications for job events\nsuch as successful runs, failures, and manual stops."
        },
        "attachments": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Files to attach (with path relative to /home/cdsw/) in notification emails.\nFor example, to attach a file located at /home/cdsw/report/result.csv,\ninclude \"report/result.csv\" in the array for this field."
        },
        "runtime_identifier": {
          "type": "string",
          "description": "The runtime image identifier to use if this job is part of a ML Runtime project.\nMust be set if using ML Runtimes."
        },
        "runtime_addon_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of runtime addon identifiers associated with this job."
        },
        "kill_on_timeout": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to kill the job on timeout. This field does nothing if the timeout\nis not set."
        },
        "timezone": {
          "type": "string",
          "description": "Timezone of the job. Relevant only when schedule\n(recurring jobs) is provided (default 'America/Los_Angeles')."
        },
        "paused": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to create the job in paused state. Relevant only when schedule\n(recurring jobs) is provided. Recurring jobs are put in un-paused state by default."
        },
        "parent_id": {
          "type": "string",
          "description": "Optional dependent job if this new job is a dependency.\nSetting this to a parent job will make this job run when the parent job\ncompletes. Cannot be used alongside \"schedule\"."
        },
        "success_recipients": {
          "type": "string",
          "title": "recipients that are notified when job succeeds"
        },
        "failure_recipients": {
          "type": "string",
          "title": "recipients that are notified on when job fails"
        },
        "timeout_recipients": {
          "type": "string",
          "title": "recipients that are notified when job times out"
        },
        "stopped_recipients": {
          "type": "string",
          "title": "recipients that are notified when job stops"
        },
        "run_as": {
          "type": "integer",
          "format": "int32",
          "title": "userID of the service account user\ndefaults to userID of the creator"
        }
      },
      "description": "Parameters to create a new job."
    },
    "CreateJobRunRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "ID of the project containing the job."
        },
        "job_id": {
          "type": "string",
          "description": "The job ID to create a new job run for."
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The environment variables to include in this run."
        },
        "arguments": {
          "type": "string",
          "title": "The arguments to pass to this job run"
        }
      },
      "description": "Parameters to create a new job run."
    },
    "CreateModelBuildRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "ID of the project containing the model build."
        },
        "model_id": {
          "type": "string",
          "description": "The ID of the model that will the build."
        },
        "comment": {
          "type": "string",
          "description": "A comment associated with the build."
        },
        "file_path": {
          "type": "string",
          "description": "The path to the file to build."
        },
        "function_name": {
          "type": "string",
          "description": "The function name to run when executing the build."
        },
        "kernel": {
          "type": "string",
          "description": "The kernel the model build should use."
        },
        "runtime_identifier": {
          "type": "string",
          "description": "The runtime ID the model build should use."
        },
        "runtime_addon_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The runtime addons the model build should use, if using runtimes."
        },
        "registered_model_version_id": {
          "type": "string",
          "description": "ID of the registered model version."
        }
      }
    },
    "CreateModelDeploymentRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "ID of the project containing the model."
        },
        "model_id": {
          "type": "string",
          "description": "ID of the model to deploy."
        },
        "build_id": {
          "type": "string",
          "description": "ID of the model build to deploy."
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "description": "Number of vCPU to allocate to the deployment."
        },
        "memory": {
          "type": "number",
          "format": "double",
          "description": "Amount of memory in GB to allocate to the deployment."
        },
        "nvidia_gpus": {
          "type": "integer",
          "format": "int32",
          "description": "Number of nvidia GPUs to allocate to the deployment."
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Environment variables to run the deployment with."
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Replications."
        }
      },
      "description": "Request for creating a model deployment."
    },
    "CreateModelRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "ID of the project containing the model."
        },
        "name": {
          "type": "string",
          "description": "Name of the model."
        },
        "description": {
          "type": "string",
          "description": "Description of the model."
        },
        "disable_authentication": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to disable authentication for requests to deployments of this model."
        },
        "registered_model_id": {
          "type": "string",
          "description": "Registered Model ID."
        },
        "run_as": {
          "type": "integer",
          "format": "int32",
          "title": "optional userID of the service account to create/deploy the model\nwhen not passed, creator's userID will be used to create/deploy the model"
        }
      },
      "description": "Parameters for creating a model."
    },
    "CreateProjectRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the project to create."
        },
        "description": {
          "type": "string",
          "description": "The description of the project."
        },
        "visibility": {
          "type": "string",
          "description": "The visibility of the project (one of \"public\", \"organization\", \"private\"). Default is private."
        },
        "parent_project": {
          "type": "string",
          "description": "Optional parent project to fork."
        },
        "git_url": {
          "type": "string",
          "description": "Optional git URL to checkout for this project."
        },
        "template": {
          "type": "string",
          "description": "Optional template to use (Python, R, PySpark, Scala, Churn Predictor)\nNote: local will create the project but nothing else, files must be\nuploaded separately."
        },
        "organization_permission": {
          "type": "string",
          "description": "If this is an organization-wide project, the visibility to others in the organization."
        },
        "default_project_engine_type": {
          "type": "string",
          "description": "Whether this project uses legacy engines or runtimes. Valid values are\n\"ml_runtime\", \"legacy_engine\", or leave blank to default to the site-wide default."
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The default set of environment variables to run"
        },
        "shared_memory_limit": {
          "type": "integer",
          "format": "int32",
          "description": "Additional shared memory limit that engines in this project should have, in MB (default 64)."
        },
        "team_name": {
          "type": "string",
          "title": "pass value of team name if the owner of this new project should be a team and not a user\ninvoker of the request should either be a member of that team or an admin"
        }
      },
      "description": "Parameters to create a new project."
    },
    "CreateRegisteredModelRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "title": "Project ID"
        },
        "experiment_id": {
          "type": "string",
          "description": "Experiment ID the run belongs to."
        },
        "run_id": {
          "type": "string",
          "description": "ID of the ExperimentRun."
        },
        "model_path": {
          "type": "string",
          "description": "Model path of model that is getting registered to model registry."
        },
        "model_name": {
          "type": "string",
          "title": "Model name"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Tags for model."
        },
        "description": {
          "type": "string",
          "description": "Registered model description."
        },
        "notes": {
          "type": "string",
          "description": "Registered model version notes."
        },
        "visibility": {
          "$ref": "#/definitions/Visibility",
          "description": "Visibility of model."
        }
      },
      "description": "CreateRegisteredModelRequest request to create a registered model.\nIf the model already exists a new version is added to the list of model versions."
    },
    "CreateRuntimeRepoRequest": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "The name  of this runtime repo"
        },
        "url": {
          "type": "string",
          "title": "The URL of this runtime repo"
        }
      }
    },
    "CreateTeamRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "ID of the project containing the model."
        },
        "type": {
          "type": "string",
          "title": "type of the team like local/ldap/saml etc"
        },
        "cn": {
          "type": "string",
          "description": "cn of the team."
        },
        "bio": {
          "type": "string",
          "description": "bio of the team."
        }
      },
      "description": "Parameters for creating a team."
    },
    "CreateV2KeyRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "username of the user whose V2 key you want to create"
        },
        "expiry_date": {
          "type": "string",
          "title": "expiry_date - optional"
        },
        "comments": {
          "type": "string",
          "title": "comments - optional"
        }
      }
    },
    "CreateV2KeyResponse": {
      "type": "object",
      "properties": {
        "api_key": {
          "type": "string",
          "title": "New api_key"
        },
        "key_id": {
          "type": "string",
          "title": "New key_id"
        },
        "created_at": {
          "type": "string",
          "title": "New created_at"
        },
        "expiry_date": {
          "type": "string",
          "title": "New expiry_date"
        },
        "comments": {
          "type": "string",
          "title": "New comments"
        }
      }
    },
    "CustomRuntimeImageDetails": {
      "type": "object",
      "properties": {
        "registry": {
          "type": "string"
        },
        "editor": {
          "type": "string"
        },
        "kernel": {
          "type": "string"
        },
        "edition": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "maintenance_version": {
          "type": "integer",
          "format": "int32"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "DefaultReplicationPolicy": {
      "type": "object",
      "properties": {
        "num_replicas": {
          "type": "string",
          "format": "int64",
          "title": "Number of replicas to use for the model"
        },
        "type": {
          "type": "string",
          "title": "Type of replication to use (i.e. fixed)"
        }
      },
      "title": "Details of a model's default replication policy"
    },
    "DefaultResources": {
      "type": "object",
      "properties": {
        "cpu_millicores": {
          "type": "string",
          "format": "int64",
          "title": "New number of cpu millicores for the model"
        },
        "memory_mb": {
          "type": "string",
          "format": "int64",
          "title": "New number of memory (in MB) for the model"
        },
        "nvidia_gpus": {
          "type": "string",
          "format": "int64",
          "title": "New number of Nvidia GPUs for the model"
        }
      },
      "title": "Details of a model's default resources"
    },
    "DeleteApplicationResponse": {
      "type": "object",
      "title": "respnse after deleting an application"
    },
    "DeleteExperimentResponse": {
      "type": "object",
      "description": "The response from deleting an experiment."
    },
    "DeleteExperimentRunBatchRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "experiment_id": {
          "type": "string"
        },
        "run_id": {
          "type": "string",
          "title": "ID of the ExperimentRun to log under"
        },
        "metrics": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of metric names to be deleted."
        },
        "params": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of param names to be deleted."
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of tags to be deleted."
        }
      },
      "description": "DeleteExperimentRunBatchRequest is used to  builk delete metrics, params, tags in one request."
    },
    "DeleteExperimentRunBatchResponse": {
      "type": "object",
      "title": "DeleteExperimentRunBatchResponse response object to delete an experiment run batch"
    },
    "DeleteExperimentRunResponse": {
      "type": "object",
      "description": "Response object for deleting an experiment run."
    },
    "DeleteJobResponse": {
      "type": "object",
      "description": "Response to DELETE a job."
    },
    "DeleteModelBuildResponse": {
      "type": "object",
      "description": "Response for deleting a model build."
    },
    "DeleteModelResponse": {
      "type": "object",
      "description": "Response for deleting a model."
    },
    "DeleteProjectCollaboratorResponse": {
      "type": "object",
      "description": "Response for deleting a project collaborator."
    },
    "DeleteProjectFileResponse": {
      "type": "object",
      "description": "Response object for deleting a file or directory."
    },
    "DeleteProjectResponse": {
      "type": "object",
      "description": "Response object when deleting a project."
    },
    "DeleteRegisteredModelResponse": {
      "type": "object",
      "description": "DeleteRegisteredModelResponse."
    },
    "DeleteRegisteredModelVersionResponse": {
      "type": "object",
      "description": "DeleteRegisteredModelVersionResponse."
    },
    "DeleteRuntimeRepoResponse": {
      "type": "object"
    },
    "DeleteV2KeyResponse": {
      "type": "object",
      "description": "Response for deleting a V2 key."
    },
    "DeleteV2KeysResponse": {
      "type": "object",
      "description": "Response for deleting all V2 keys."
    },
    "DisableEnginesRequest": {
      "type": "object",
      "properties": {
        "disable_engines": {
          "type": "boolean",
          "format": "boolean",
          "title": "Status whether disabled or not"
        }
      },
      "description": "Parameters to update engines disablement."
    },
    "DisableEnginesResponse": {
      "type": "object",
      "properties": {
        "rows_affected": {
          "type": "integer",
          "format": "int32",
          "title": "Projects that updated"
        },
        "check": {
          "type": "boolean",
          "format": "boolean",
          "title": "Check status of the engines"
        }
      },
      "description": "Response for updating engines disablement."
    },
    "EngineStatus": {
      "type": "string",
      "enum": [
        "ENGINE_SCHEDULING",
        "ENGINE_STARTING",
        "ENGINE_RUNNING",
        "ENGINE_STOPPING",
        "ENGINE_STOPPED",
        "ENGINE_UNKNOWN",
        "ENGINE_SUCCEEDED",
        "ENGINE_FAILED",
        "ENGINE_TIMEDOUT"
      ],
      "default": "ENGINE_SCHEDULING",
      "description": "The various stages of an engine."
    },
    "Experiment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the experiment."
        },
        "project_id": {
          "type": "string",
          "title": "Project ID"
        },
        "name": {
          "type": "string",
          "description": "Human readable name that identifies the experiment."
        },
        "artifact_location": {
          "type": "string",
          "description": "Location where artifacts for the experiment are stored."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Birth date in YYYY-MM-DDThh:mm:ss.uuZ format (ISO 8601 format).\nOutput only.",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Last update in YYYY-MM-DDThh:mm:ss.uuZ format (ISO 8601 format).\nOutput only.",
          "readOnly": true
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Tags: Additional metadata key-value pairs."
        },
        "lifecycle_stage": {
          "type": "string",
          "description": "lifecycle_stage shows the status of experiment."
        },
        "user": {
          "$ref": "#/definitions/ShortUser",
          "description": "User who creates the Experiment."
        }
      },
      "description": "Experiment is basically where a user can group and organize all the efforts\nthat goes into developing a machine learning model.\nExperiment names are unique across workspaces."
    },
    "ExperimentRun": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the ExperimentRun."
        },
        "experiment_id": {
          "type": "string",
          "description": "The experiment ID."
        },
        "user": {
          "$ref": "#/definitions/ShortUser",
          "description": "User who initiated the ExperimentRun."
        },
        "status": {
          "$ref": "#/definitions/ExperimentRunStatus",
          "description": "Current status of the ExperimentRun."
        },
        "start_time": {
          "type": "string",
          "format": "date-time",
          "description": "Unix timestamp of when the ExperimentRun started in milliseconds."
        },
        "end_time": {
          "type": "string",
          "format": "date-time",
          "description": "Unix timestamp of when the ExperimentRun ended in milliseconds."
        },
        "artifact_uri": {
          "type": "string",
          "description": "Sub directory of actual experiment artifacts location."
        },
        "data": {
          "$ref": "#/definitions/ExperimentRunData",
          "description": "ExperimentRun data."
        }
      },
      "description": "A single experiment run."
    },
    "ExperimentRunData": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          },
          "description": "ExperimentRun metrics."
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "ExperimentRun parameters."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Additional metadata key-value pairs."
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileInfo"
          },
          "description": "File location (relative to the experiment run's root artifact directory) and metadata for artifacts."
        },
        "registered_model_metadata": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisteredModelMetadata"
          },
          "description": "RegisteredModelMetadata is used to show what model version is registered for this model."
        }
      },
      "description": "ExperimentRun data (metrics, params, and tags)."
    },
    "ExperimentRunStatus": {
      "type": "string",
      "enum": [
        "EXPERIMENT_RUN_RUNNING",
        "EXPERIMENT_RUN_SCHEDULED",
        "EXPERIMENT_RUN_FINISHED",
        "EXPERIMENT_RUN_FAILED",
        "EXPERIMENT_RUN_KILLED"
      ],
      "default": "EXPERIMENT_RUN_RUNNING",
      "description": "The status of an ExperimentRun.\n\n - EXPERIMENT_RUN_RUNNING: Run has been initiated.\n - EXPERIMENT_RUN_SCHEDULED: Run is scheduled to run at a later time.\n - EXPERIMENT_RUN_FINISHED: Run has completed.\n - EXPERIMENT_RUN_FAILED: Run execution failed.\n - EXPERIMENT_RUN_KILLED: Run killed by user."
    },
    "FileInfo": {
      "type": "object",
      "properties": {
        "path": {
          "type": "string",
          "description": "The relative path to the file or directory.\nThe path is relative to the base resource that this file represents.\nFor example, if it's a project file/directory, it will be relative to /home/cdsw.\nAlternatively, if it's an experiment run artifact, it will be relative to the\nexperiment run's root artifact directory."
        },
        "is_dir": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the path is a directory.\nOutput only.",
          "readOnly": true
        },
        "file_size": {
          "type": "string",
          "format": "int64",
          "description": "Size in bytes. Unset for directories.\nOutput only.",
          "readOnly": true
        }
      },
      "description": "Metadata of a single file or directory."
    },
    "GetExperimentRunMetricsResponse": {
      "type": "object",
      "properties": {
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          },
          "description": "ExperimentRun metrics."
        }
      },
      "title": "GetExperimentRunMetricsResponse returns all the metrics for a given value"
    },
    "Job": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Public identifier of the job.\nOutput only.",
          "readOnly": true
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "description": "vCPU cores available for the job."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was created.\nOutput only.",
          "readOnly": true
        },
        "creator": {
          "$ref": "#/definitions/ShortUser",
          "description": "The user that created the job.\nOutput only.",
          "readOnly": true
        },
        "engine_image_id": {
          "type": "string",
          "format": "int64",
          "description": "ID of the engine image. Will be 0 if using runtimes.\nOutput only.",
          "readOnly": true
        },
        "english_schedule": {
          "type": "string",
          "description": "English schedule.\nOutput only.",
          "readOnly": true
        },
        "arguments": {
          "type": "string",
          "description": "Arguments to the job."
        },
        "type": {
          "type": "string",
          "description": "Type of job, whether it's \"manual\", \"cron\", or \"dependent\"\nOutput only.",
          "readOnly": true
        },
        "kernel": {
          "type": "string",
          "description": "Kernel the job uses."
        },
        "memory": {
          "type": "number",
          "format": "double",
          "description": "Job memory in GB."
        },
        "name": {
          "type": "string",
          "description": "Job name."
        },
        "parent_id": {
          "type": "string",
          "description": "ID of the parent job - if the job is \"dependent\"."
        },
        "paused": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether the job is paused.\nOutput only.",
          "readOnly": true
        },
        "schedule": {
          "type": "string",
          "description": "The job schedule."
        },
        "script": {
          "type": "string",
          "description": "The script to execute for the job."
        },
        "timeout": {
          "type": "string",
          "format": "int64",
          "description": "Timeout of a job run for this job."
        },
        "timezone": {
          "type": "string",
          "description": "Timezone of the job if this is a scheduled job.\nOutput only.",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the job was last updated.\nOutput only.",
          "readOnly": true
        },
        "environment": {
          "type": "string",
          "description": "The default environment variables for the job, as JSON."
        },
        "nvidia_gpu": {
          "type": "integer",
          "format": "int32",
          "description": "The number of nvidia GPUs allocated for this job."
        },
        "runtime_identifier": {
          "type": "string",
          "description": "The runtime image identifier if this is a runtime job. Will be blank if\nusing engines."
        },
        "runtime_addon_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The runtime addons associated with this job."
        },
        "kill_on_timeout": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to kill this job when it times out."
        },
        "project": {
          "$ref": "#/definitions/ShortProject"
        },
        "owner": {
          "$ref": "#/definitions/ShortUser"
        },
        "run_as": {
          "type": "integer",
          "format": "int32",
          "title": "userID of the service account that will be used to run the job.\nIf 0 is returned, it means that job will run as the logged in user"
        }
      },
      "description": "One Job."
    },
    "JobRecipient": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Recipient's email"
        },
        "notify_on_success": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to notify on job success."
        },
        "notify_on_failure": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to notify on job failure."
        },
        "notify_on_timeout": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to notify on job timeout."
        },
        "notify_on_stop": {
          "type": "boolean",
          "format": "boolean",
          "description": "Whether to notify when the job is stopped."
        }
      },
      "title": "Recipients of a job"
    },
    "JobRun": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string",
          "description": "The project that this job run belongs to. This is an opaque identifier."
        },
        "job_id": {
          "type": "string",
          "description": "The job that this job run belongs to. This is an opaque identifier."
        },
        "status": {
          "$ref": "#/definitions/EngineStatus",
          "title": "The job run's status"
        },
        "id": {
          "type": "string",
          "description": "The alphanumeric identifier for the job run."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp of when the job run was created."
        },
        "scheduling_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the job run was scheduled at."
        },
        "starting_at": {
          "type": "string",
          "format": "date-time",
          "description": "The tiemstamp the job run started being processed."
        },
        "running_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the job run started running."
        },
        "finished_at": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp the job run finished."
        },
        "kernel": {
          "type": "string",
          "description": "The kernel of the job run. This value is inherited from the job when the\njob run is started. If the job is later edited, this will still\nrepresent the kernel this job run ran with."
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "description": "The number of vCPU allocated for the job run (in cores). This value is\ninherited from the job when the job run is started. If the job is later\nedited, this will still represent the number of CPU this job run ran\nwith."
        },
        "memory": {
          "type": "number",
          "format": "double",
          "description": "The amount of memory allocated for the job run (in GB). This value is\ninherited from the job when the job run is started. If the job is later\nedited, this will still represent the amount of memory this job run ran\nwith."
        },
        "nvidia_gpu": {
          "type": "integer",
          "format": "int32",
          "description": "The number of Nvidia GPUs allocated for the job run. This value is\ninherited from the job when the job run is started. If the job is later\nedited, this will still represent the number of GPUs this job run ran\nwith."
        },
        "arguments": {
          "type": "string",
          "description": "The custom arguments to the job run."
        },
        "environment": {
          "type": "string",
          "title": "The custom environment for the job run"
        },
        "creator": {
          "$ref": "#/definitions/ShortUser",
          "description": "The user that created the job run."
        },
        "runtime_identifier": {
          "type": "string",
          "description": "The runtime image identifier if this used a runtime engine.\nBlank if this used a legacy engine."
        }
      },
      "description": "A single instance of a job run."
    },
    "ListAllRunAsMachineUserCollaboratorsResponse": {
      "type": "object",
      "properties": {
        "run_as_machine_user_collaborators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RunAsMachineUserCollaborator"
          }
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token is a value that can be added to a new ListProjectCollaborators call to fetch\nthe next page of projects, if any remain."
        }
      }
    },
    "ListApplicationsResponse": {
      "type": "object",
      "properties": {
        "applications": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Application"
          },
          "title": "applications is a list of application"
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token is a value that can be added to a new ListApplications call to fetch\nthe next page of projects, if any remain."
        }
      },
      "description": "Response object when GETting a list of applications."
    },
    "ListExperimentRunsResponse": {
      "type": "object",
      "properties": {
        "experiment_runs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentRun"
          },
          "description": "ExperimentRuns that match the search criteria."
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token is a value that can be added to a new ListJobs call to fetch\nthe next page of jobs, if any remain."
        }
      },
      "description": "List experiments runs response contains an array of experiment runs."
    },
    "ListExperimentsResponse": {
      "type": "object",
      "properties": {
        "experiments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Experiment"
          }
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token is a value that can be added to a new ListJobs call to fetch\nthe next page of jobs, if any remain."
        }
      },
      "title": "ListExperimentsResponse containes array of experiment objects"
    },
    "ListJobRunsResponse": {
      "type": "object",
      "properties": {
        "job_runs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/JobRun"
          },
          "description": "A list of job runs."
        },
        "next_page_token": {
          "type": "string",
          "description": "A token for the next page of job runs."
        }
      },
      "description": "Zero or more job runs."
    },
    "ListJobsResponse": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Job"
          },
          "description": "Jobs is the response object with details on a list of jobs."
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token is a value that can be added to a new ListJobs call to fetch\nthe next page of jobs, if any remain."
        }
      },
      "description": "Response object when GETting a list of jobs."
    },
    "ListModelBuildsResponse": {
      "type": "object",
      "properties": {
        "model_builds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelBuild"
          },
          "description": "The page of model builds."
        },
        "next_page_token": {
          "type": "string",
          "description": "The next page token."
        }
      },
      "description": "Response for listing model builds."
    },
    "ListModelDeploymentsResponse": {
      "type": "object",
      "properties": {
        "model_deployments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelDeployment"
          },
          "description": "The page of model deployments."
        },
        "next_page_token": {
          "type": "string",
          "description": "The next page token."
        }
      },
      "description": "Response for listing model deployments."
    },
    "ListModelsResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Model"
          },
          "description": "The models in this page."
        },
        "next_page_token": {
          "type": "string",
          "description": "The page token for the next page."
        }
      },
      "description": "Response for listing models."
    },
    "ListNewsFeedsResponse": {
      "type": "object",
      "properties": {
        "feeds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NewsFeed"
          }
        },
        "next_page_token": {
          "type": "string"
        }
      }
    },
    "ListProjectCollaboratorsResponse": {
      "type": "object",
      "properties": {
        "collaborators": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Collaborator"
          },
          "title": "The collaborators of the project"
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token is a value that can be added to a new ListProjectCollaborators call to fetch\nthe next page of projects, if any remain."
        }
      },
      "description": "Response for getting project collaborators."
    },
    "ListProjectFilesResponse": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileInfo"
          },
          "description": "The files/directories in the provided path."
        }
      },
      "description": "Response object for listing project files."
    },
    "ListProjectsResponse": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Project"
          },
          "description": "Projects is the response object with details on a list of projects."
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token is a value that can be added to a new ListProjects call to fetch\nthe next page of projects, if any remain."
        }
      },
      "description": "Response object when GETting a list of projects."
    },
    "ListRegisteredModelsResponse": {
      "type": "object",
      "properties": {
        "models": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisteredModel"
          },
          "description": "List of registered models."
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token."
        }
      },
      "description": "ListRegisteredModelsResponse returns a list of registered models."
    },
    "ListRuntimeAddonsResponse": {
      "type": "object",
      "properties": {
        "runtime_addons": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuntimeAddon"
          },
          "title": "The page of runtime addons;"
        },
        "next_page_token": {
          "type": "string",
          "description": "A token to fetch the next page of runtime addons."
        }
      },
      "description": "Response for listing runtime addons."
    },
    "ListRuntimeReposResponse": {
      "type": "object",
      "properties": {
        "runtimerepos": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RuntimeRepo"
          },
          "title": "list of RuntimeRepos"
        },
        "next_page_token": {
          "type": "string",
          "description": "Next page token."
        }
      }
    },
    "ListRuntimesResponse": {
      "type": "object",
      "properties": {
        "runtimes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Runtime"
          },
          "description": "The page of runtimes."
        },
        "next_page_token": {
          "type": "string",
          "description": "A token to fetch the next page of runtimes."
        }
      },
      "description": "Response for listing runtimes."
    },
    "ListV2KeysResponse": {
      "type": "object",
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/V2KeyDetails"
          },
          "title": "individual key is same as that of the createV2KeyResponse\nall keys is just array of that response"
        }
      }
    },
    "LogExperimentRunBatchRequest": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "experiment_id": {
          "type": "string"
        },
        "run_id": {
          "type": "string",
          "title": "ID of the ExperimentRun to log under"
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          },
          "description": "Metrics to log."
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Params to log."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Tags to log."
        },
        "model_json": {
          "type": "string",
          "description": "MLmodel file in json format."
        }
      },
      "description": "LogExperimentRunBatchRequest is used to bulk update ExperimentRun details\nlike metrics, params, and tags in one request."
    },
    "LogExperimentRunBatchResponse": {
      "type": "object",
      "description": "Response object to log an experiment batch."
    },
    "MLOPSType": {
      "type": "string",
      "enum": [
        "MLFLOW",
        "SIMPLE"
      ],
      "default": "MLFLOW"
    },
    "MLflowMetadata": {
      "type": "object",
      "properties": {
        "experiment_id": {
          "type": "string",
          "description": "Experiment ID the run belongs to."
        },
        "run_id": {
          "type": "string",
          "description": "Run ID."
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          },
          "description": "Metrics for the run."
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "ExperimentRun parameters."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Additional metadata key-value pairs."
        }
      },
      "description": "MLflowMetadata is an mlflow model metadata."
    },
    "Metric": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Key identifying this metric."
        },
        "value": {
          "type": "number",
          "format": "double",
          "description": "Value associated with this metric."
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "The timestamp at which this metric was recorded."
        },
        "step": {
          "type": "string",
          "format": "int64",
          "description": "Step at which to log the metric."
        }
      },
      "description": "Metric associated with a ExperimentRun, represented as a key-value pair."
    },
    "Model": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the model.\nA model CRN looks like \u003cworkspace CRN\u003e/\u003cUUID\u003e. The model ID is the UUID portion of the CRN."
        },
        "name": {
          "type": "string",
          "description": "The name of the model."
        },
        "description": {
          "type": "string",
          "description": "The description of the model."
        },
        "creator": {
          "$ref": "#/definitions/ShortUser",
          "description": "The creator of the model."
        },
        "access_key": {
          "type": "string",
          "description": "The model's access key."
        },
        "deletion_status": {
          "type": "string",
          "description": "The models deletion status."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the model was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the model was last updated."
        },
        "crn": {
          "type": "string",
          "description": "CRN of the model."
        },
        "auth_enabled": {
          "type": "boolean",
          "format": "boolean",
          "description": "Enable model authentication."
        },
        "project": {
          "$ref": "#/definitions/ShortProject",
          "description": "Project Info associated with the model."
        },
        "registered_model_id": {
          "type": "string",
          "description": "Registered Model ID reference to model Regisry."
        },
        "visibility": {
          "type": "string",
          "description": "Visibility of the model."
        },
        "default_resources": {
          "$ref": "#/definitions/DefaultResources",
          "description": "DefaultResources in json format."
        },
        "default_replication_policy": {
          "$ref": "#/definitions/DefaultReplicationPolicy",
          "description": "defaultReplicationPolicy in json format."
        },
        "run_as": {
          "type": "integer",
          "format": "int32",
          "title": "userID of the service account that should be used to create/deploy the model\nWhen it is empty, creator's userID is used"
        }
      },
      "description": "One model."
    },
    "ModelBuild": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the model build."
        },
        "model_id": {
          "type": "string",
          "description": "ID of the model containing the build."
        },
        "creator": {
          "$ref": "#/definitions/ShortUser",
          "description": "The user who created the build."
        },
        "comment": {
          "type": "string",
          "description": "The comment associated with the build."
        },
        "file_path": {
          "type": "string",
          "description": "Path from the project root to the file to build."
        },
        "function_name": {
          "type": "string",
          "description": "Name of the function to run."
        },
        "engine_image": {
          "type": "string",
          "description": "The engine image to build the model with."
        },
        "kernel": {
          "type": "string",
          "description": "The kernel to run the build with."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the model build was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the model build was most recently updated."
        },
        "status": {
          "type": "string",
          "description": "Status of the build."
        },
        "deletion_status": {
          "type": "string",
          "description": "State of the deletion of the build."
        },
        "crn": {
          "type": "string",
          "description": "CRN of the build."
        },
        "built_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the model build was most recently updated."
        },
        "runtime_identifier": {
          "type": "string",
          "description": "Runtime identifier if this model uses runtimes."
        },
        "runtime_addon_identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Runtime addons if this model uses runtimes."
        },
        "registered_model_version_id": {
          "type": "string",
          "description": "ID of the registered model version."
        }
      },
      "description": "A single model build."
    },
    "ModelDeployment": {
      "type": "object",
      "properties": {
        "project_id": {
          "type": "string"
        },
        "model_id": {
          "type": "string",
          "description": "ID of the model containing the deployment."
        },
        "build_id": {
          "type": "string",
          "description": "ID of the build containing the deployment."
        },
        "id": {
          "type": "string",
          "description": "ID of the model deployment.\nThis is derived from the model deployment CRN. The model deployment CRN is of the\nform \u003cworkspace CRN\u003e/\u003cUUID\u003e, and this ID is the UUID portion of the model deployment CRN."
        },
        "cpu": {
          "type": "number",
          "format": "double",
          "description": "Number of vCPUs allocated to this deployment."
        },
        "memory": {
          "type": "number",
          "format": "double",
          "description": "Amount of memory to allocate to this deployment."
        },
        "nvidia_gpu": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Nvidia GPUs to allocate to  this project."
        },
        "environment": {
          "type": "string",
          "description": "Environment variables to run the deployment with."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the deployment was created."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the deployment was last updated."
        },
        "stopped_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the deployment was stopped."
        },
        "crn": {
          "type": "string",
          "description": "CRN of the model deployment."
        },
        "deployer": {
          "$ref": "#/definitions/ShortUser",
          "description": "The user who deployed the model."
        },
        "status": {
          "type": "string",
          "description": "The status of the model deployment."
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "Number of Replicas."
        }
      },
      "description": "A single model deployment."
    },
    "ModelVersionMetadata": {
      "type": "object",
      "properties": {
        "mlops_type": {
          "$ref": "#/definitions/MLOPSType",
          "description": "mlops_type can be mlfow or simple."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "tags for model."
        },
        "workspace_url": {
          "type": "string",
          "description": "Workspace URL to track back the model origins."
        },
        "project_id": {
          "type": "string",
          "description": "Project ID."
        },
        "owner": {
          "$ref": "#/definitions/ShortUser",
          "description": "owner who owns the project."
        },
        "mlflow_metadata": {
          "$ref": "#/definitions/MLflowMetadata",
          "description": "mlflow model metadata."
        },
        "simple_metadata": {
          "$ref": "#/definitions/SimpleMetadata",
          "description": "SimpleMetadata will be null if mlops_type is MLOPSType.MLFLOW."
        }
      },
      "description": "ModelVersionMetadata is a model version metadata."
    },
    "NewsFeed": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "link": {
          "type": "string"
        },
        "imgpath": {
          "type": "string"
        },
        "is_viewed": {
          "type": "boolean",
          "format": "boolean"
        },
        "date": {
          "type": "string",
          "format": "date-time",
          "description": "created at YYYY-MM-DDThh:mm:ss.uuZ format (ISO 8601 format)."
        },
        "icon": {
          "type": "string"
        },
        "is_new": {
          "type": "boolean",
          "format": "boolean"
        },
        "description_html": {
          "type": "string"
        }
      }
    },
    "Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "An opaque public identifier for the project.\nOutput only.",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "The short name; does not include user/team."
        },
        "owner": {
          "$ref": "#/definitions/ShortUser",
          "description": "Project owner.\nOutput only.",
          "readOnly": true
        },
        "creator": {
          "$ref": "#/definitions/ShortUser",
          "description": "Project creator.\nOutput only.",
          "readOnly": true
        },
        "description": {
          "type": "string",
          "description": "Describes the project."
        },
        "visibility": {
          "type": "string",
          "title": "Visibility of the project: \"public\", \"organization\", or \"private\""
        },
        "default_engine_type": {
          "type": "string",
          "description": "Whether this project uses engines or runtimes: \"ml_runtime\" or \"legacy_engine\"."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Birth date in YYYY-MM-DDThh:mm:ss.uuZ format (ISO 8601 format).\nOutput only.",
          "readOnly": true
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Last update in YYYY-MM-DDThh:mm:ss.uuZ format (ISO 8601 format).\nOutput only.",
          "readOnly": true
        },
        "creation_status": {
          "type": "string",
          "description": "Creation status of the project (e.g. creating, success, failure)\nOutput only.",
          "readOnly": true
        },
        "permissions": {
          "$ref": "#/definitions/ProjectPermissions",
          "description": "The permissions that the user making the api call has in this project.\nThis field is read-only, updates on this field will be ignored."
        },
        "shared_memory_limit": {
          "type": "integer",
          "format": "int32",
          "description": "Additional shared memory limit that each engine in this project has, in MB."
        },
        "environment": {
          "type": "string",
          "description": "The environment variables configured for this project."
        },
        "ephemeral_storage_request": {
          "type": "integer",
          "format": "int32",
          "description": "The ephemeral storage requested for the project, in GB."
        },
        "ephemeral_storage_limit": {
          "type": "integer",
          "format": "int32",
          "description": "The ephemeral storage limit for the project, in GB."
        }
      },
      "description": "One project."
    },
    "ProjectPermissions": {
      "type": "object",
      "properties": {
        "read": {
          "type": "boolean",
          "format": "boolean",
          "description": "Read-only, aka Viewer. Can view code, data, and results."
        },
        "write": {
          "type": "boolean",
          "format": "boolean",
          "description": "Read-write, aka Contributor. Can view and modify all project resources."
        },
        "admin": {
          "type": "boolean",
          "format": "boolean",
          "description": "Administrator. Can view and modify all project resources,\nadd new collaborators, and delete the project."
        },
        "business_user": {
          "type": "boolean",
          "format": "boolean",
          "description": "business_user can access application."
        },
        "operator": {
          "type": "boolean",
          "format": "boolean",
          "description": "operator can start or stop pre-existing jobs."
        },
        "inherit": {
          "type": "boolean",
          "format": "boolean",
          "description": "inherit is meant to be used only for teams."
        }
      },
      "description": "Permissions for a user inside a project."
    },
    "RegisterCustomRuntimeRequest": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "RegisterCustomRuntimeResponse": {
      "type": "object",
      "properties": {
        "validation_success": {
          "type": "boolean",
          "format": "boolean"
        },
        "insert_success": {
          "type": "boolean",
          "format": "boolean"
        },
        "reason": {
          "type": "string"
        },
        "reason_data": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/CustomRuntimeImageDetails"
        }
      }
    },
    "RegisteredModel": {
      "type": "object",
      "properties": {
        "model_id": {
          "type": "string",
          "description": "Model ID."
        },
        "name": {
          "type": "string",
          "description": "Model name."
        },
        "description": {
          "type": "string",
          "description": "Model description."
        },
        "owner": {
          "$ref": "#/definitions/ShortUser",
          "description": "Model owner."
        },
        "permission": {
          "type": "string",
          "description": "Permission of the user requesting the model."
        },
        "visibility": {
          "$ref": "#/definitions/Visibility",
          "description": "Model Visibility private or public."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Model creation time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Model last updated time."
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Model version count."
        },
        "model_versions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RegisteredModelVersion"
          },
          "description": "Registered model versions list."
        },
        "next_page_token": {
          "type": "string",
          "description": "next_page_token is a token to get the next page of results."
        }
      }
    },
    "RegisteredModelMetadata": {
      "type": "object",
      "properties": {
        "model_path": {
          "type": "string",
          "description": "model_path artifact folder name."
        },
        "model_name": {
          "type": "string",
          "description": "model_name."
        },
        "model_id": {
          "type": "string",
          "description": "model_id of the registered model id."
        },
        "model_version_id": {
          "type": "string",
          "description": "model_version_id of the."
        },
        "version_number": {
          "type": "integer",
          "format": "int32",
          "description": "count of the model version."
        },
        "run_id": {
          "type": "string",
          "description": "run_id of the experiment run."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "created_at timestamp of model registered."
        }
      },
      "description": "RegisteredModelMetadata is used to represent model version metadata."
    },
    "RegisteredModelVersion": {
      "type": "object",
      "properties": {
        "model_id": {
          "type": "string",
          "description": "Model ID."
        },
        "model_version_id": {
          "type": "string",
          "description": "Model version ID."
        },
        "version_name": {
          "type": "string",
          "description": "Model version name."
        },
        "number": {
          "type": "integer",
          "format": "int32",
          "description": "Model version number."
        },
        "notes": {
          "type": "string",
          "description": "Model version description."
        },
        "user": {
          "$ref": "#/definitions/ShortUser",
          "description": "Model version uploaded by."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "Model version creation time."
        },
        "updated_at": {
          "type": "string",
          "format": "date-time",
          "description": "Model version last updated time."
        },
        "status": {
          "type": "string",
          "description": "Model version status."
        },
        "model_version_metadata": {
          "$ref": "#/definitions/ModelVersionMetadata",
          "description": "Model version metadata."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Model version tags."
        }
      },
      "description": "RegisteredModelVersion is a model version."
    },
    "RotateV1KeyRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "username of the user whose V1 key you want to rotate"
        },
        "api_key_expiry_date": {
          "type": "string",
          "title": "api_key_expiry_date - optional"
        },
        "api_key_comments": {
          "type": "string",
          "title": "api_key_comments - optional"
        }
      }
    },
    "RotateV1KeyResponse": {
      "type": "object",
      "properties": {
        "api_key": {
          "type": "string",
          "title": "New api_key"
        },
        "api_key_hash": {
          "type": "string",
          "title": "New api_key_hash"
        },
        "api_key_expiry_date": {
          "type": "string",
          "title": "New api_key_expiry_date"
        },
        "api_key_comments": {
          "type": "string",
          "title": "New api_key_comments"
        }
      }
    },
    "RunAsMachineUserCollaborator": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "integer",
          "format": "int32"
        },
        "user_name": {
          "type": "string"
        }
      }
    },
    "Runtime": {
      "type": "object",
      "properties": {
        "image_identifier": {
          "type": "string",
          "description": "The identifier for this runtime."
        },
        "editor": {
          "type": "string",
          "description": "The editor configured for this runtime."
        },
        "kernel": {
          "type": "string",
          "description": "The kernel associated with this runtime."
        },
        "edition": {
          "type": "string",
          "description": "The edition of this runtime."
        },
        "description": {
          "type": "string",
          "description": "A short description of the runtime."
        },
        "full_version": {
          "type": "string",
          "description": "The full version of the runtime."
        },
        "status": {
          "type": "string",
          "description": "Status of the runtime."
        }
      },
      "description": "A single runtime."
    },
    "RuntimeAddon": {
      "type": "object",
      "properties": {
        "identifier": {
          "type": "string",
          "description": "The unique identifier of the runtime addon."
        },
        "component": {
          "type": "string",
          "description": "The component this addon relates to, i.e. Spark."
        },
        "display_name": {
          "type": "string",
          "description": "The display name of the addon."
        },
        "status": {
          "type": "string",
          "description": "The addon's status."
        },
        "manageable": {
          "type": "boolean",
          "format": "boolean",
          "description": "Manageable addon."
        },
        "created_at": {
          "type": "string",
          "format": "date-time",
          "description": "When the deployment was created."
        },
        "id": {
          "type": "integer",
          "format": "int32",
          "description": "ID of the addon."
        },
        "reason": {
          "type": "string",
          "description": "Reason of not availability."
        }
      },
      "description": "A single runtime addon."
    },
    "RuntimeRepo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "The numeric identifier for this runtime repo"
        },
        "name": {
          "type": "string",
          "title": "The name  of this runtime repo"
        },
        "url": {
          "type": "string",
          "title": "The URL of this runtime repo"
        }
      }
    },
    "RuntimeStatus": {
      "type": "string",
      "enum": [
        "ENABLED",
        "DISABLED",
        "DEPRECATED"
      ],
      "default": "ENABLED"
    },
    "ShortProject": {
      "type": "object",
      "properties": {
        "public_identifier": {
          "type": "string",
          "title": "Project ID"
        },
        "name": {
          "type": "string",
          "title": "Name of the Project"
        },
        "default_project_engine": {
          "type": "string",
          "title": "Default Project Engine type. e.g. \"ml_runtime\""
        },
        "slug": {
          "type": "string",
          "title": "Slug information of the Project"
        }
      },
      "description": "Abbreviated project information."
    },
    "ShortUser": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "description": "The username."
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address."
        }
      },
      "description": "Abbreviated user information."
    },
    "SimpleMetadata": {
      "type": "object",
      "properties": {
        "git_url": {
          "type": "string",
          "description": "git url for model code."
        },
        "commit_id": {
          "type": "string",
          "description": "commit sha for model code."
        },
        "metrics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Metric"
          },
          "description": "metrics for the model."
        },
        "params": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "ExperimentRun parameters."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Additional metadata key-value pairs."
        }
      },
      "description": "SimpleMetadata is a simple model metadata."
    },
    "Tag": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "The tag key."
        },
        "value": {
          "type": "string",
          "description": "The tag value."
        }
      },
      "description": "Tag is used to add more metadata regarding an experiment/run."
    },
    "Team": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "title": "id of the team"
        },
        "username": {
          "type": "string",
          "title": "username of the team"
        },
        "username_hash": {
          "type": "string",
          "title": "username_hash of the team"
        },
        "type": {
          "type": "string",
          "title": "type of the team like local/ldap/saml etc"
        },
        "email": {
          "type": "string",
          "title": "email of the team"
        },
        "name": {
          "type": "string",
          "title": "name of the team"
        },
        "bio": {
          "type": "string",
          "title": "bio of the team"
        },
        "public_email": {
          "type": "string",
          "title": "public_email of the team"
        },
        "admin": {
          "type": "boolean",
          "format": "boolean",
          "title": "admin flag of the team"
        },
        "business_user": {
          "type": "boolean",
          "format": "boolean",
          "title": "business_user flag of the team"
        },
        "github": {
          "type": "string",
          "title": "github of the team"
        },
        "github_pubkey_id": {
          "type": "string",
          "format": "int64",
          "title": "github_pubkey_id of the team"
        },
        "github_oauth_completed": {
          "type": "boolean",
          "format": "boolean",
          "title": "github_oauth_completed of the team"
        },
        "last_login_at": {
          "type": "string",
          "format": "date-time",
          "title": "last_login_at time of the team"
        },
        "joined_on": {
          "type": "string",
          "format": "date-time",
          "title": "joined_on time of the team"
        },
        "followed": {
          "type": "boolean",
          "format": "boolean",
          "title": "followed of the team"
        },
        "last_seen_at": {
          "type": "string",
          "format": "date-time",
          "title": "last_seen_at time of the team"
        },
        "hadoop_username": {
          "type": "string",
          "title": "hadoop_username of the team"
        },
        "last_logout_at_tz": {
          "type": "string",
          "format": "date-time",
          "title": "last_logout_at_tz time of the team"
        },
        "password_updated_at": {
          "type": "string",
          "format": "date-time",
          "title": "password_updated_at time of the team"
        },
        "followers": {
          "type": "string",
          "format": "int64",
          "title": "followers of the team"
        },
        "public_projects": {
          "type": "string",
          "format": "int64",
          "title": "public_projects of the team"
        },
        "organization_projects": {
          "type": "string",
          "format": "int64",
          "title": "organization_projects of the team"
        },
        "private_projects": {
          "type": "string",
          "format": "int64",
          "title": "private_projects of the team"
        },
        "running_dashboards": {
          "type": "string",
          "format": "int64",
          "title": "running_dashboards of the team"
        },
        "active_vcpus": {
          "type": "string",
          "format": "int64",
          "title": "active_vcpus of the team"
        },
        "members": {
          "type": "string",
          "format": "int64",
          "title": "number of members in the team"
        },
        "api_keys": {
          "type": "string",
          "format": "int64",
          "title": "api_keys of the team"
        },
        "last_context_id": {
          "type": "string",
          "format": "int64",
          "title": "last_context_id of the team"
        },
        "banned": {
          "type": "boolean",
          "format": "boolean",
          "title": "banned flag of the team"
        },
        "deactivated": {
          "type": "boolean",
          "format": "boolean",
          "title": "deactivated flag of the team"
        },
        "namespace": {
          "type": "string",
          "title": "namespace of the team"
        },
        "html_url": {
          "type": "string",
          "title": "html_url of the team"
        },
        "url": {
          "type": "string",
          "title": "url of the team"
        },
        "sessions_run": {
          "type": "string",
          "format": "int64",
          "title": "sessions_run of the team"
        },
        "jobs_run": {
          "type": "string",
          "format": "int64",
          "title": "jobs_run of the team"
        },
        "cpu_hours": {
          "type": "number",
          "format": "double",
          "title": "cpu_hours of the team"
        },
        "gpu_hours": {
          "type": "number",
          "format": "double",
          "title": "gpu_hours of the team"
        },
        "memory_hours": {
          "type": "number",
          "format": "double",
          "title": "memory_hours of the team"
        },
        "avg_session_duration": {
          "type": "number",
          "format": "double",
          "title": "avg_session_duration of the team"
        },
        "permissions": {
          "$ref": "#/definitions/TeamPermissions",
          "title": "permissions of the team"
        },
        "account_status": {
          "type": "string",
          "title": "account_status of the team"
        },
        "ldap_synced": {
          "type": "boolean",
          "format": "boolean",
          "title": "ldap_synced flag of the team"
        },
        "last_synced_at": {
          "type": "string",
          "format": "date-time",
          "title": "last_synced_at of the team"
        },
        "team_members": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TeamMember"
          },
          "title": "teamMembers of the team"
        },
        "inactivity_timeout": {
          "type": "integer",
          "format": "int32",
          "title": "_inactivity_timeout of the team"
        }
      },
      "title": "Team details"
    },
    "TeamMember": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "title": "id of the team member"
        },
        "username": {
          "type": "string",
          "title": "username of the the team member"
        },
        "name": {
          "type": "string",
          "title": "name of the team memeber"
        },
        "html_url": {
          "type": "string",
          "title": "html_url of the team memeber"
        },
        "url": {
          "type": "string",
          "title": "url of the team memeber"
        },
        "permission": {
          "type": "string",
          "title": "permission of the team memeber"
        }
      },
      "title": "Details of a team member"
    },
    "TeamPermissions": {
      "type": "object",
      "properties": {
        "business_user": {
          "type": "boolean",
          "format": "boolean",
          "description": "business_user can access application."
        },
        "read": {
          "type": "boolean",
          "format": "boolean",
          "description": "Read-only, aka Viewer. Can view code, data, and results."
        },
        "operator": {
          "type": "boolean",
          "format": "boolean",
          "description": "operator can start or stop pre-existing jobs."
        },
        "write": {
          "type": "boolean",
          "format": "boolean",
          "description": "Read-write, aka Contributor. Can view and modify all project resources."
        },
        "admin": {
          "type": "boolean",
          "format": "boolean",
          "description": "Administrator. Can view and modify all project resources,\nadd new collaborators, and delete the project."
        },
        "owner": {
          "type": "boolean",
          "format": "boolean",
          "title": "owner"
        }
      },
      "title": "Permissions of given team"
    },
    "UpdateRegisteredModelRequest": {
      "type": "object",
      "properties": {
        "model_id": {
          "type": "string",
          "description": "Model ID."
        },
        "description": {
          "type": "string",
          "description": "Any description for the model."
        },
        "visibility": {
          "$ref": "#/definitions/Visibility"
        },
        "user_id": {
          "type": "string"
        }
      },
      "title": "updateRegisteredModelRequest request to update a model's description"
    },
    "UpdateRegisteredModelVersionRequest": {
      "type": "object",
      "properties": {
        "model_id": {
          "type": "string",
          "description": "Model ID."
        },
        "model_version_id": {
          "type": "string",
          "description": "Model version ID."
        },
        "notes": {
          "type": "string",
          "description": "Model version description."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          },
          "description": "Model version tags."
        }
      }
    },
    "UpdateRuntimeAddonStatusRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/UpdateRuntimeAddonStatusRequestRuntimeAddonStatus",
          "title": "Target status"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "List of runtime addons to update (not recommended)."
        },
        "identifiers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of runtime addons to update."
        }
      },
      "description": "Parameters to update selected runtime addons."
    },
    "UpdateRuntimeAddonStatusRequestRuntimeAddonStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "AVAILABLE",
        "DISABLED",
        "DEPRECATED",
        "DELETED",
        "FAILED"
      ],
      "default": "UNKNOWN"
    },
    "UpdateRuntimeAddonStatusResponse": {
      "type": "object",
      "properties": {
        "rows_affected": {
          "type": "integer",
          "format": "int32",
          "title": "Number of runtime addons updated"
        }
      },
      "description": "Response for updating runtimes."
    },
    "UpdateRuntimeStatusRequest": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/RuntimeStatus",
          "title": "Status for selected runtimes"
        },
        "runtime_id": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          },
          "description": "List of runtimes to update (not recommended)."
        },
        "image_identifier": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of runtimes to update."
        }
      },
      "description": "Parameters to update selected runtimes."
    },
    "UpdateRuntimeStatusResponse": {
      "type": "object",
      "properties": {
        "rows_affected": {
          "type": "integer",
          "format": "int32",
          "title": "Number of runtimes updated"
        }
      },
      "description": "Response for updating runtimes."
    },
    "UpdateSingleModel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "ID of the model.\nA model CRN looks like \u003cworkspace CRN\u003e/\u003cUUID\u003e. The ID is the UUID portion of the CRN."
        },
        "name": {
          "type": "string",
          "description": "The name of the model."
        },
        "description": {
          "type": "string",
          "description": "The description of the model."
        },
        "visibility": {
          "type": "string",
          "description": "Visibility of the model."
        },
        "default_resources": {
          "$ref": "#/definitions/DefaultResources",
          "description": "DefaultResources in json format."
        },
        "default_replication_policy": {
          "$ref": "#/definitions/DefaultReplicationPolicy",
          "description": "DefaultReplicationPolicy in json format."
        },
        "run_as": {
          "type": "integer",
          "format": "int32",
          "title": "userID of the service account that should be used to deploy the model\nPass a value \u003c=0 to reset it and to make use of logged in user's ID for future deployments"
        }
      },
      "description": "Parameters of a single model for the update flow."
    },
    "V2KeyDetails": {
      "type": "object",
      "properties": {
        "key_id": {
          "type": "string",
          "title": "New key_id"
        },
        "created_at": {
          "type": "string",
          "title": "New created_at"
        },
        "expiry_date": {
          "type": "string",
          "title": "New expiry_date"
        },
        "comments": {
          "type": "string",
          "title": "New comments"
        }
      },
      "title": "single entry of V2 key that is stored in the DB"
    },
    "ValidateCustomRuntimeResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "format": "boolean"
        },
        "reason": {
          "type": "string"
        },
        "reason_data": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/CustomRuntimeImageDetails"
        }
      }
    },
    "Visibility": {
      "type": "string",
      "enum": [
        "PRIVATE",
        "PUBLIC"
      ],
      "default": "PRIVATE"
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufFieldMask": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The set of field mask paths."
        }
      },
      "description": "paths: \"f.a\"\n    paths: \"f.b.d\"\n\nHere `f` represents a field in some root message, `a` and `b`\nfields in the message found in `f`, and `d` a field found in the\nmessage in `f.b`.\n\nField masks are used to specify a subset of fields that should be\nreturned by a get operation or modified by an update operation.\nField masks also have a custom JSON encoding (see below).\n\n# Field Masks in Projections\n\nWhen used in the context of a projection, a response message or\nsub-message is filtered by the API to only contain those fields as\nspecified in the mask. For example, if the mask in the previous\nexample is applied to a response message as follows:\n\n    f {\n      a : 22\n      b {\n        d : 1\n        x : 2\n      }\n      y : 13\n    }\n    z: 8\n\nThe result will not contain specific values for fields x,y and z\n(their value will be set to the default, and omitted in proto text\noutput):\n\n\n    f {\n      a : 22\n      b {\n        d : 1\n      }\n    }\n\nA repeated field is not allowed except at the last position of a\npaths string.\n\nIf a FieldMask object is not present in a get operation, the\noperation applies to all fields (as if a FieldMask of all fields\nhad been specified).\n\nNote that a field mask does not necessarily apply to the\ntop-level response message. In case of a REST get operation, the\nfield mask applies directly to the response, but in case of a REST\nlist operation, the mask instead applies to each individual message\nin the returned resource list. In case of a REST custom method,\nother definitions may be used. Where the mask applies will be\nclearly documented together with its declaration in the API.  In\nany case, the effect on the returned resource/resources is required\nbehavior for APIs.\n\n# Field Masks in Update Operations\n\nA field mask in update operations specifies which fields of the\ntargeted resource are going to be updated. The API is required\nto only change the values of the fields as specified in the mask\nand leave the others untouched. If a resource is passed in to\ndescribe the updated values, the API ignores the values of all\nfields not covered by the mask.\n\nIf a repeated field is specified for an update operation, new values will\nbe appended to the existing repeated field in the target resource. Note that\na repeated field is only allowed in the last position of a `paths` string.\n\nIf a sub-message is specified in the last position of the field mask for an\nupdate operation, then new value will be merged into the existing sub-message\nin the target resource.\n\nFor example, given the target message:\n\n    f {\n      b {\n        d: 1\n        x: 2\n      }\n      c: [1]\n    }\n\nAnd an update message:\n\n    f {\n      b {\n        d: 10\n      }\n      c: [2]\n    }\n\nthen if the field mask is:\n\n paths: [\"f.b\", \"f.c\"]\n\nthen the result will be:\n\n    f {\n      b {\n        d: 10\n        x: 2\n      }\n      c: [1, 2]\n    }\n\nAn implementation may provide options to override this default behavior for\nrepeated and message fields.\n\nIn order to reset a field's value to the default, the field must\nbe in the mask and set to the default value in the provided resource.\nHence, in order to reset all fields of a resource, provide a default\ninstance of the resource and set all fields in the mask, or do\nnot provide a mask as described below.\n\nIf a field mask is not present on update, the operation applies to\nall fields (as if a field mask of all fields has been specified).\nNote that in the presence of schema evolution, this may mean that\nfields the client does not know and has therefore not filled into\nthe request will be reset to their default. If this is unwanted\nbehavior, a specific service may require a client to always specify\na field mask, producing an error if not.\n\nAs with get operations, the location of the resource which\ndescribes the updated values in the request message depends on the\noperation kind. In any case, the effect of the field mask is\nrequired to be honored by the API.\n\n## Considerations for HTTP REST\n\nThe HTTP kind of an update operation which uses a field mask must\nbe set to PATCH instead of PUT in order to satisfy HTTP semantics\n(PUT must only be used for full updates).\n\n# JSON Encoding of Field Masks\n\nIn JSON, a field mask is encoded as a single string where paths are\nseparated by a comma. Fields name in each path are converted\nto/from lower-camel naming conventions.\n\nAs an example, consider the following message declarations:\n\n    message Profile {\n      User user = 1;\n      Photo photo = 2;\n    }\n    message User {\n      string display_name = 1;\n      string address = 2;\n    }\n\nIn proto a field mask for `Profile` may look as such:\n\n    mask {\n      paths: \"user.display_name\"\n      paths: \"photo\"\n    }\n\nIn JSON, the same mask is represented as below:\n\n    {\n      mask: \"user.displayName,photo\"\n    }\n\n# Field Masks and Oneof Fields\n\nField masks treat fields in oneofs just as regular fields. Consider the\nfollowing message:\n\n    message SampleMessage {\n      oneof test_oneof {\n        string name = 4;\n        SubMessage sub_message = 9;\n      }\n    }\n\nThe field mask can be:\n\n    mask {\n      paths: \"name\"\n    }\n\nOr:\n\n    mask {\n      paths: \"sub_message\"\n    }\n\nNote that oneof type names (\"test_oneof\" in this case) cannot be used in\npaths.\n\n## Field Mask Verification\n\nThe implementation of any API method which has a FieldMask type field in the\nrequest should verify the included field paths, and return an\n`INVALID_ARGUMENT` error if any path is unmappable.",
      "title": "`FieldMask` represents a set of symbolic field paths, for example:"
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  }
}
